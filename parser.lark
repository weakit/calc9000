// calc9000 Parser Grammar

?start: expression
      | set

set: (expression "=")+ expression
// | expression ":=" expression -> set_delayed // TODO
   | expression "=" "." -> unset

?expression: rule

?rule: relation "->" rule
     | relation

?relation: addsub
         | relation (RELATIONAL addsub)+

RELATIONAL: "=="
          | ">"
          | "<"
          | ">="
          | "<="

?addsub: muldiv
       | addsub ("+" muldiv)+ -> plus
       | addsub ("-" muldiv)+ -> subtract

?muldiv: prefix
       | muldiv "/" prefix -> divide
       | muldiv ("*" prefix)+ -> times
       | muldiv power -> times
       | muldiv "." prefix -> dot

?prefix: power
       | "+" prefix -> positive
       | "-" prefix -> negative

?power: unary
      | unary ("^" prefix)+

?execute: function

function: atom "[" (expression)? ("," expression)* "]"
// TODO | function "[" (expression)? ("," expression)* "]"

?unary: factorial
      | atom

?atom: "(" expression ")"
     | execute
     | list
     | numeric 
     | symbol
     | string
     | out


list: "{" (expression ("," expression)*)? "}"

?assign_atom: function
            | assign_list
            | numeric
            | CNAME

assign_list: "{" (CNAME|assign_list) ("," (CNAME|assign_list))* "}"

factorial: unary "!"

?numeric: FLOAT
        | INT

symbol: CNAME

?string: ESCAPED_STRING

out: OUT+
   | OUT (INT)

OUT: "%"

%import common.CNAME
%import common.ESCAPED_STRING
%import common.INT
%import common.FLOAT
%import common.WS_INLINE
%ignore WS_INLINE